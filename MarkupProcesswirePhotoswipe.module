<?php namespace ProcessWire;
/**
 * MarkupProcesswirePhotoswipe
 * 
 * Photoswipe gallery for processwire
 * 
 * @todo add flavours, themes (bright)
 * @todo embedded, nonmodal mode
 * 
 */
class MarkupProcesswirePhotoswipe extends WireData implements Module, ConfigurableModule
{
    
    const className = 'MarkupProcesswirePhotoswipe';

    private $modulePath;
    
    private $moduleUrl;

    private $themesPath;
    
    private $themesurl;

    private $templatesPath;

    private $templatesUrl;

    private $availableThemes = [];  // ['theme-name' => 'module/themes/theme-name']

    private $themeFile = '';        // resolved theme file

    private $themeScripts = [];     // all script urls related to loaded themes

    private $themeStyles = [];      // all styles urls related to loaded themes

    public static function getModuleInfo() {
        return array(
            'title' => 'ProcessWire Photoswipe Gallery',
            'author' => 'Steffen Henschel',
            'version' => '0.7',
            'summary' => __('Easily include Photoswipe by Dmitry Semenov'),
            'autoload' => true,
            'requires' => array('ProcessWire>=3.0.0', 'PHP>=5.6')
        );
    }

    static public function getDefaultConfig() {
        return array(
            'theme' => 'plain',
            'customSkinCssLocation' => '',
            'customUiJsLocation' => '',
            'imageResizerConfig' => "size=500x500\nupscaling=false\ncropping=false\nquality=90",
            'loresResizerConfig' => "size=320x320\nupscaling=false\ncropping=false\nquality=15",
            'scriptsMode' => 'auto'
            );
    }

    public function __construct() {
        foreach(self::getDefaultConfig() as $key => $value) {
            $this->$key = $value;
        }
    }



    /**
     * init
     *
     * @return void
     */
    public function init() {

        if(!$this->moduleLoaded) {
            
            $this->addHookAfter("Page::render", $this, 'insertResources');
            $this->set('moduleLoaded', true);

            // set common paths and urls
            $this->modulePath = wire('config')->paths->siteModules . self::className . '/';
            $this->moduleUrl = wire('config')->urls->siteModules . self::className . '/';
            $this->themesPath = $this->modulePath . 'themes/';
            $this->themesUrl = $this->moduleUrl . 'themes/';
            $this->templatesPath = wire('config')->paths->templates;
            $this->templatesUrl = wire('config')->urls->templates;

            // scan for valid themes
            $this->availableThemes = $this->findThemes();

            wire('config')->set('pwpswpConf', new WireData());
            wire('config')->pwpswpConf->hookFlag = false;
            wire('config')->pwpswpConf->scripts = new FilenameArray();
            wire('config')->pwpswpConf->styles = new FilenameArray();

        } else {
            // set flag to allow hook to insert all required markup
            wire('config')->pwpswpConf->hookFlag = true;
            $this->collectResources($this->theme);
        }
    }



    /**
     * findThemes
     *
     * scan modules theme directory and make a list of valid themes
     * 
     * @return array ['theme-name' => 'theme-php-path']
     */
    static private function findThemes() {
        $modulePath = dirname(__FILE__);
        $themesPath = $modulePath . '/themes';
        $themesArray = [];
        // scan themes directory for themes
        // add names which can resolve my-theme/my-theme.php 
        $themesPathHandle = opendir($themesPath);
        if($themesPathHandle) {
            while(($entry = readdir($themesPathHandle))) {
                $entryPath = $themesPath . '/' . $entry;
                $entryPhp = $entryPath . '/' . $entry . '.php';
                if(is_dir($entryPath) && $entry != '.' && $entry != '..' && file_exists($entryPhp)) {
                    $themesArray[$entry] = $entryPath;
                }
            }
        }
        return $themesArray;
    }



    /**
     * insertResources
     * 
     * hook method
     *
     * @param HookEvent $event
     * @return void
     */
    public function insertResources(HookEvent $event) {

        if (wire('config')->pwpswpConf->hookFlag == true) {

            // insert all stylesheet tags into the page header markup
            $compiledStyleSheets = '';
            foreach (wire('config')->pwpswpConf->styles as $styleUrl) {
                $compiledStyleSheets .= "<link rel=\"stylesheet\" href=\"$styleUrl\">\n";
            }
            $event->return = str_ireplace('</head>', $compiledStyleSheets  . '</head>', $event->return);

            // append all script tags and the photoswipe element to the body
            $compiledScriptTags = '';
            foreach (wire('config')->pwpswpConf->scripts as $scriptUrl) {
                $compiledScriptTags .= "<script src=\"$scriptUrl\"></script>\n";
            }
            $event->return = str_ireplace('</body>',  $this->getPswpElementMarkup() . "\n" . $compiledScriptTags . "\n</body>", $event->return);
        }
    }



    public function getPswpCoreCssUrl() {
        return $this->moduleUrl . "photoswipe/photoswipe.css";
    }

    public function getPswpSkinCssUrl() {
        if($this->customSkinCssLocation != '') {
            return wire('config')->urls->root . ltrim( $this->customSkinCssLocation , '/');
        } else {
            return $this->moduleUrl . "photoswipe/default-skin/default-skin.css";
        }
    }

    public function getPswpCoreJsUrl() {
        return  $this->moduleUrl . "photoswipe/photoswipe.min.js";
    }

    public function getPswpUiJsUrl() {
        if($this->customUiJsLocation != '') {
            return wire('config')->urls->root . ltrim( $this->customUiJsLocation , '/');
        } else {
            return $this->moduleUrl . "photoswipe/photoswipe-ui-default.min.js";
        }
    }

    public function getPswpInitScriptUrl() {
        if($this->scriptsMode === 'amd') {
            return $this->moduleUrl . "pwpswp-amd.js";
        } else {
            return $this->moduleUrl . "pwpswp.js";
        }
    }

    public function getPswpElementMarkup() {
        return  file_get_contents( __DIR__ . DIRECTORY_SEPARATOR . "pswp-element.html" );
    }



    /**
     * collectResources
     * 
     * @param string    $theme
     */
    private function collectResources(string $theme = null) {

        // Photoswipe stuff

        if($this->scriptsMode === 'auto') {
            wire('config')->pwpswpConf->scripts->add($this->getPswpCoreJsUrl());
            wire('config')->pwpswpConf->scripts->add($this->getPswpUiJsUrl());
            wire('config')->pwpswpConf->scripts->add($this->getPswpInitScriptUrl());            
        }

        wire('config')->pwpswpConf->styles->add($this->getPswpCoreCssUrl());
        wire('config')->pwpswpConf->styles->add($this->getPswpSkinCssUrl());

        // ProcesswirePhotoswipe stuff

        if(array_key_exists($theme, $this->availableThemes)) {
            
            $themeStyle = $this->themesUrl . "$theme/$theme.css";
            if(file_exists($this->themesPath . "$theme/$theme.css")) wire('config')->pwpswpConf->styles->add($themeStyle);
            
            $themeScript = $this->themesUrl . "$theme/$theme.js";
            if(file_exists($this->themesPath . "$theme/$theme.js")) wire('config')->pwpswpConf->scripts->add($themeScript);

        } else if(file_exists($this->templatesPath.$theme)) {

            $themeStyle = preg_replace("/(.php$)/", ".css", $this->themeFile);
            if(file_exists($themeStyle)) $this->themeStyles[] = preg_replace("/(.php$)/", ".css", $this->templatesUrl.$theme);
            
            $themeScript = preg_replace("/(.php$)/", ".js", $this->themeFile);
            if(file_exists($themeScript)) $this->themeScripts[] = preg_replace("/(.php$)/", ".js", $this->templatesUrl.$theme);;
        }

        wire('config')->pwpswpConf->scripts->unique();
        wire('config')->pwpswpConf->styles->unique();
    }



     /**
      * renderGallery
      * 
      * Render complete gallery markup from image field Pageimages.
      *
      * @param  Pageimages  $images         Array of images from image field
      * @param  array       $options        
      * @param  string      $templateFile   path to alternative template file
      * @return void
      */
    public function renderGallery($images, array $options = null, string $theme = null) {
        
        if($images instanceof WireArray || gettype($images) === 'array') {

            $this->addHookAfter("Page::render", $this, 'insertPwpswpStyleAndScriptMarkup');

            $defaultConfig = $this->getDefaultConfig();
        
            // imageResizerOptions
            // 
            // according to the processwire imageResizerOptions, except:
            // size is defined like so ['size' => '640x480']
            //
            // decode imageResizerConfigurations in default configuration 
            // for a more comprehensible override capability
            $imageResizerOptions = $this->decodeTextareaData($defaultConfig['imageResizerConfig']);
            $loresResizerOptions = $this->decodeTextareaData($defaultConfig['loresResizerConfig']);

            // 1. merge each with unnamespaced resizerOptions from $options, 
            //    convenience feature to declare common settings
            if($options) {
                $imageResizerOptions = array_merge($imageResizerOptions, $options);
                // $loresResizerOptions = array_merge($loresResizerOptions, $options); // do not apply to lores, one might not alwas want that
            }

            // 2. merge with individually namespaced resizerOptions
            if(isset($options['imageResizerOptions'])) { $imageResizerOptions = array_merge($imageResizerOptions, $options['imageResizerOptions']); }
            if(isset($options['loresResizerOptions'])) { $loresResizerOptions = array_merge($loresResizerOptions, $options['loresResizerOptions']); }

            $theme = $theme ?: $options['theme'] ?: $this->theme;
            $themeFile = $this->getThemeFile($theme);

            $this->collectResources($theme);

            // flag page to allow hook to insert all required markup
            wire('config')->pwpswpConf->hookFlag = true;

            return wire('files')->render($themeFile, array(
                'images' => $images,
                'options' => $options,
                'imageResize' => $this->getResizeLambda($imageResizerOptions),
                'loresResize' => $this->getResizeLambda($loresResizerOptions)
            ));

        } else {
            throw new WireException("renderGallery() expects instanceof WireArray or array type.", 1);
        }
    }



    /**
     * getResizeLambda
     *
     * @param   array       $resizeOptions
     * @param   array       $mixinOptions
     * @return  callable    
     */
    public function getResizeLambda($resizeOptions) {

        return function(Pageimage $image, $mixinOptions = []) use($resizeOptions) {

            if(strpos($resizeOptions['size'], 'x' === false)) throw new WireException("size option must contain \"x\"", 1);

            $resizeOptions['size'] = explode('x', $resizeOptions['size']);
            $resizeOptions = array_merge($resizeOptions, $mixinOptions);

            $w = isset($resizeOptions['size'][0]) ? $resizeOptions['size'][0] : 0; 
            $h = isset($resizeOptions['size'][1]) ? $resizeOptions['size'][1] : 0;

            return $image->size($w, $h, $resizeOptions);
        };
    }



    /**
     * getThemeFile
     *
     * Sees if $theme is available theme name, if so, return corresponding theme file path.
     * If $theme is a php file relative to the templates folder, return this file path.
     * 
     * @param string    $theme
     */
    private function getThemeFile(string $theme = null) {
        
        if(array_key_exists($theme, $this->availableThemes)) {
            return $this->availableThemes[$theme] . "/$theme.php";
        } else if(file_exists($this->templatesPath.$theme)) {
            return $this->templatesPath.$theme;
        }
    }



    /**
     * decodeTextareaData
     *
     * @param string $datablob
     * @return void
     */
    private function decodeTextareaData($datablob) {

        // split lines
        // https://stackoverflow.com/questions/7058168/explode-textarea-php-at-new-lines
        $datasplash = preg_split('/\r\n|[\r\n]/', $datablob);
        
        $dataclean = array();

        foreach ($datasplash as $line) {
            
            $keyval = explode('=', $line);
            $key = $keyval[0];
            $val = $keyval[1];
            
            // boolean?
            if($val === "true" || $val === "false") { 
                $val = filter_var($val, FILTER_VALIDATE_BOOLEAN);
                $dataclean[$key] = $val;
                continue;
            }

            // integer?
            $v = filter_var($val, FILTER_VALIDATE_INT, FILTER_NULL_ON_FAILURE);
            if($v !== null) { 
                $val = $v;
                $dataclean[$key] = $val;
                continue;
            }

            $dataclean[$key] = $val;
        }

        return $dataclean;
    }



    /**
     * Create the modules setting page
     *
     */
    static public function getModuleConfigInputfields(array $data) {

        $modules = wire('modules');

        // merge default config settings (custom values overwrite defaults)
        $defaults = self::getDefaultConfig();
        $data = array_merge($defaults, $data);

        $form = new InputfieldWrapper();

        // introduction
        $field = $modules->get("InputfieldMarkup");
        $field->name = 'introduction';
        $field->label = __('Introduction');
        $field->value = 'Hello';
        $form->add($field);

        // choose theme
        $field = $modules->get("InputfieldRadios");
        $field->name = "theme";
        $field->label = __("Choose theme");
        $field->description = __("Affects gallery markup, style and functionality. Does not affect Photoswipe skin!");
        foreach (self::findThemes() as $key => $value) {
            $field->addOption($key);
        }
        // $field->notes = __("");
        $field->value = $data['theme'];
        $form->add($field);

        // custom skin css location
        $field = $modules->get("InputfieldText");
        $field->name = "customSkinCssLocation";
        $field->label = __("Location of custom Photoswipe CSS skin file");
        // $field->description = "";
        $field->notes = __("Relative to ProcessWires root folder.");
        $field->value = $data['customSkinCssLocation'];
        // $field->width = 75;
        $form->add($field);

        // custom ui js location
        $field = $modules->get("InputfieldText");
        $field->name = "customUiJsLocation";
        $field->label = __("Location of custom Photoswipe UI js file");
        // $field->description = "";
        $field->notes = __("Relative to ProcessWires root folder.");
        $field->value = $data['customUiJsLocation'];
        // $field->width = 75;
        $form->add($field);

        $field = $modules->get("InputfieldTextarea");
        $field->name = "imageResizerConfig";
        $field->label = __("Defaults for thumbnail image");
        // $field->description = "";
        $field->notes = __("One option per line, according to the following (default) example:\nsize=500x500 (width x height)\nupscaling=false\ncropping=false\nquality=90");
        $field->value = $data['imageResizerConfig'];
        // $field->width = 75;
        $form->add($field);

        $field = $modules->get("InputfieldTextarea");
        $field->name = "loresResizerConfig";
        $field->label = __("Defaults for lores preload image");
        // $field->description = "";
        $field->notes = __("One option per line, according to the following example:\nsize=320x320 (width x height)\nupscaling=false\ncropping=false\nquality=50");
        $field->value = $data['loresResizerConfig'];
        // $field->width = 75;
        $form->add($field);

        $field = $modules->get("InputfieldRadios");
        $field->name = "scriptsMode";
        $field->label = __("Javascript insertion mode");
        $field->addOptions([
            'auto' => __("Automatic script insertion"),
            'manual' => __("Manual script insertion"),
            'amd' => __("AMD compatible script and manual insertion")
        ]);
        $field->notes = __("In case of amd: You will have to initialize the module manually. Init() is exposed.");
        $field->value = $data['scriptsMode'];
        $form->add($field);

        // append to body
        // $field = $modules->get("InputfieldCheckbox");
        // $field->name = "appendToBody";
        // $field->label = __("Append to body");
        // $field->description = "Instead of appending the script tag to the head element of your document, append it to the body.";
        // $field->notes = "";
        // $field->value = $data['appendToBody'];
        // // $field->width = 25;
        // $form->add($field);

        return $form;
    }



    /**
     * module installation / deinstallation
     * 
     */
    public function ___install() {}
    public function ___uninstall() {}
}